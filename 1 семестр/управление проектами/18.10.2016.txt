Экспертная оценка

- функциональная декомпозиция (случаи использования, мокапы)
- анализ внешней среды (список допущений, связанных с внешней средой)
- выявление нефункциональных требований
- оценка полноты и непротиворечивости требований
- высокоуровневая структурная декомпозиция
- выбор технологий и инструментария
- проверка основных решений на прототипах и уточнение архитектуры
- оценка конкретных задач

Самые главные --- первые три.
Почему он не используется всегда?
- это довольно долго
- ресурсоёмко
- слишком подробно (много информации нужно про систему)
- всё сильно завязано на опыте и квалификации человека, проводящего оценку (это отчасти решается добавлением эксперта; можно нескольких и консолидировать оценку потом)
Можно параллельно проводить параметрическую оценку, тем самым увеличив точность. Чем больше знаний о предметной области, тем более точной будет оценка.
Для небольших проектов оценка делается за часы (или единицы дней); для больших -- месяцы.

=====================================================================================

Для крупных проектов индустрия уже давно пыталась предложить методы оценки
Метод Use Case Points

Идея -- оценка начинается с подсчёта безразмерного параметра use case points (очки случаев использования)
Он считается так: оцениваем 4 числа --
1. примерный объём взаимодействий с окружением -- UAW (акторы и взаимодействия -- unadjusted actors weight)
- простое взаимодействие (1 б.)
- средней сложности (2 б.)
- сложное (3 б.)
Пример:
- система взаимодействует с другими по открытому API -- 1 б.
- есть протокол взаимодействия (внешняя обращается к вашей, ваша интерпретирует, отвечает) -- 2 б.
- пользователь участвует во взаимодейтсвии -- 3 б. 
2. функции -- (UUCW -- unadjusted use case weight)
- простое взаимодействие (5 б.) -- до 3 шагов
- средней сложности (10 б.) -- от 4 до 7
- сложное (15 б.) -- от 8 шагов
Сложные должны быть исключением (лучше избегать сложных случаев использования)
3. фактор технической сложности
13 параметров, по которым нужно проставить от 0 до 5 оценку для проекта
Факторы:
- открытость
- распределённость
- ...
У каждого фактора есть вес, предложенный авторами методики (от 0.5 до 2)
Оценка для параметра = вес * оценка параметра
Итоговый вес: TCT = 0.6 + суммарный вес / 100
4. фактор сложности окружения
Аналогично
Итоговый вес: ECF = 1.4 + (-0.3 * суммарный вес)

После оценки всех параметров оцениваем UCP = (UAW + UUCW) * TCF * ECF
По этой оценке мы можем сказать только, что система более сложная, если у неё оценка больше, или более простая, если оценка меньше (т.е. оценка поверхностна и малопригодна для того, чтобы предсказать, какую команду привлечь, сколько денег нужно и т.д.)
Оценим трудозатраты = UCP * X человеко-часов (Х ~ 20-30)

=====================================================================================

Домашка: сделать оценку проекта
- экспертная оценка
- Use Case Points (договориться с командами, чтобы половина делала ЭО, половина UCP)

=====================================================================================

Что ещё нужно учитывать при оценке?

Что-то можно не делать заново, а взять готовое (если есть нужные вам компоненты, а у вас есть ресурсы, чтобы приобрести эти компоненты).
По каждой компоненте нужно принять такое решение.
Пример: нужно сделать веб-сайт, на котором мы будем вести оценки (с помощью, видимо, визуальных средств?)
Нам нужна компонента, которая умеет рисовать в вебе графики.
Аргументы за создание:
- имеем больше влияния на её поведение
- ваши разработчики получат опыт
- это будет ваша интеллектуальная собственность-
- заказчик может быть резко против использования третьесторонних компонент
Аргументы за заимствование:
- она может оказаться дешевле,чем стоимость усилий на её разработку (и это практически всегда так, и разница получается колоссальной)
- это может быть "велосипедом" в области, который совершенно не нужно изобретать заново
- строим сеть контактов, приобретая компоненту
- у нас может не быть компетенции в данной области, и придётся нанимать специалиста
- самое главное -- мы выиграем время

=====================================================================================

Что забывают в оценке?

1. Разработка требований
Для больших проектов разработка требований выполняется в ходе работы; часть команды будет этим занята, и это потребует ресурсов
2. Разработка системы развёртывания и само развёртывание
Дистанционный пакет или приложение (должно быть средство и процесс). Для крупных систем, где 100-1000 рабочих мест, развёртывание -- серьёзная задача
3. Создание документации и справочной системы
Иногда документация и не создаётся, но в крупных проектах обычно должна быть техническая и пользовательская документации.
4. Внедрение заказчика в процессы (бизнес-составляющая)
Нужно научить людей новому подходу
5. Миграция данных
Есть система, выполняющая некоторые функции; при разработке новой должна быть обеспечена некоторая миграция (например, перенос счетов при разработке новой системы для управления документооборотом)
6. Обновление на лету с сохранением данных
Система работает и должна обновиться; если она работает 24/7, нужно предусмотреть её режимы работы, позволяющие ей параллельно обновляться на новую версию
7. Интеграционное и системное тестирование
Тестирование покомпонентно и тестирование в целом (сравнимо по трудоёмкости с разработкой)
8. Передача кода во владение заказчику
Как бует осуществляться передача? Например, можно в папке, но это бесполезно (можно передать старую версию, и нет способа проверить, что передали). Обычно будет требоваться не просто отдать исходники, а всё собрать, поставить и т.д.
9. Интеграция со сторонними системами
10. Нефункциональные свойства
- производительность
- безопасность
- масштабируемость
- переносимость
Сделать вконтактик для своей университетской группы и для многомиллионной аудитории -- не одно и то же.
Для группы достаточно некоторых базовых функций, а большой вконтактик должен уметь выдерживать нагрузку в млн пользователей
11. Обсуждения, командировки
12. Управление проектом
Иногда оценивается в 10% от общих ресурсов на проект
13. Организационные и общекомандные мероприятия
14. Отпуска, праздники, больничные
15. Адаптация и обучение сотрудников
16. Финансовые затраты на покупку оборудования и ПО