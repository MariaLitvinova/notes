Декомпозиция -- инструмент, позволяющий более подробно описать, что нужно сделать.

Первый шаг -- описание рамок проекта (в самых общих формулировках: для чего проект нужен). 
Но не в совсем общих словах (нужен веб-сайт), а, например, нужен веб-сайт для некоторой цели (в терминах предметной области).
- цели
- описание
- список продуктов
- критерии, по достижению которых проект считается выполненным (как минимум -- стоимость, качество, время)

Бывает идеальный мир (где заказчик сразу приходит с подробным ТЗ на 100 страниц), но в реальных ситуациях всё начинается обычно с довольно общих слов, большого количества разговоров и совещаний.

Структурная декомпозиция работ: WBS (Work Breakdown Structure) -- работы, которые нужно выполнить для достижения целей. Постепенно задача всё более детализируется.
Декомпозиция:
- позволяет описать рамки
- используется как критерий: чего нет в WBS, не делается в проекте
- используется для оценки проекта
- используется для составления календарного плана-графика

Как создавать структурную декомпозицию:
1. выбираем главные элементы, отражающие, как проект будет организован (очень редко задачу нельзя разбить на более мелкие подзадачи
Пример:
- клиент
- сервер
(для клиент-серверного приложения)
Или, если система состоит из нескольких приложений, делим её на эти приложения.
2. После этого получились оцениваниемые задачи => переходим к шагу 4
Если нет, то продолжаем разбиение дальше (переходим к шагу 1).
Доходим до момента, когда будут перечислены конкретные работы, которые понятно как оценивать.
3. Определяем основные подкомпоненты
4. Проверяем корректность:
- все подкомпоненты необходимы и достаточны, чтобы выполнить работу? (возможно, некоторые подзадачи окажутся лишними, их надо выкинуть)
- все "листики" дерева должны быть ясно определены, разночтений быть не должно (если они есть, можно подкорректировать описание или декомпозировать задачу дальше)
- можно ли по каждому листу оценить его стоимость, планировать его и назначить ответственного (если нет, продолжим уточнение дерева)

Пример: (задача организации выставки)
Есть компания, которая хочет продвинуть свои услуги и продукты, и выставляет их на выставке.
Декомпозиция на подзадачи:
- подготовка
- проведение
- завершение

Каждую задачу рассматриваем отдельно:
1. Подготовка (самая объёмная часть, каждая её подзадача делится ещё на несколько)
- подготовка стендов
- подготовка материалов (презентационных, листовок и т.д.)
- формальности (билеты и т.д.)
2. Проведение
- презентация материалов
- общение с зрителями
3. Завершение
- взаимодействие с заинтересовавшимися участниками выставки
-...

Домашнее задание: сделать структурную декомпозицию проекта

==========================================================

Оценка проекта

Что можно оценивать? 4 параметра:
- объём проект (сколько единиц работы необходимо сделать)
- трудоёмкость (сколько труда необходимо вложить)
- сроки (сколько календарного времени нужно потратить)
- стоимость (какое вознаграждение нужно для выполнения работы)

Пример: нужно построить забор вокруг прямоугольного участка
Объём работы: можно оценить в метрах, в площади (длина и высота забора), в секциях забора; кроме того, есть факторы, которые могут осложнять работу (не везде забор одинаково просто ставить) -- характеристики окружения: особенности грунта, материал, ландшафт, несерийные элементы забора (ворота, камеры наблюдения)
Пусть участок имеет длину 100м и ширину 40м, высоту 2м, делаем мы его деревянными досками
(20 и 8 секций)
Считаем, что монтаж одной секции в нижней части занимает 20 минут, в верхней -- 30 минут (из-за особенностей грунта -- в верхней части грунт хуже)
В итоге получилось (предположим) 18 часов
__________________________
|                        |
|                        \
|                         
|                        /
|________________________|
Трудоёмкость: 18 часов
Сроки: (будет рассмотрено далее)
Стоимость: (будет рассмотрено далее)

В чём измерять объём? С забором более-менее понятно, а в чём измерять объём ПО?
- в человекоднях
- в количестве строк кода
- в количестве модулей (сложный критерий -- они могут быть разными)
- в точках входа API
- Use Case Points

Оценка объёма независима от внешней среды (критерии в днях, в деньгах могут использоваться для манипуляций, обещаний и т.д.).

Сложности оценки
Есть ряд проблем, которые не позволяют оценивать ПО так же легко, как, например, забор.
- нет опыта оценки (непонятно, как оценивать вообще)
- не до конца понятно, что делать (понимание уточняется в процессе, и в самом начале можно делать некоторые разумные предположения и исходя из них делать оценку)
- проект очень большой, сложно подступиться (для решения этой проблемы используется структурная и функциональная декомпозиция)
- непонятно, кто будет выполнять работу (команда, возможно, ещё не сформировалась к моменту оценки, и оценка очень зависит от того, кто будет выполнять работу -- стажёры или опытные разработчики)
- отсутствие знаний в предметной области, в которой предполагается работать (даже с забором, скорее всего, найдётся множество проблем, про которые знают только специалисты в этой области, а мы в своей оценки могли очень пере- или недооценить некоторые моменты; решение -- пригласить специалиста в данной предметной области)
- не хватает знания технологий (решение -- привлечь специалиста или выписать оценку, сделав некоторые разумные предположения)
- задачи имеют нелинейную сложность, похожие проблемы могут иметь очень разную сложность (например, оценка в экранах: экраны ведь могут быть очень разными; такие детали могут очень сильно менять сложность)
- нефункциональные требования (не ЧТО система должна делать, а КАК: требования по производительности, по переносимости)
Все эти неопределённости нельзя нивелировать -- некоторая неопределённость всегда будет оставаться.

Конус неопределённости оценок
Левая часть -- начало проекта, правая -- проект завершён (на графике -- конус, лежащий на боку; его основание -- слева, там, где проект начинается; по оси x -- стадии проекта (время), по оси y -- разброс оценки).
- сначала -- очень предварительная оценка
- после структурной декомпозиции, обсуждения разброс сужается
- он сужается ещё больше после детального описания подзадач (~60%)
- когда закончена разработка пользовательского интерфейса (~40%)
- постепенно мы приходим к точной оценке проекта, когда проект уже завершён

Приемлемая точность оценки
1. Предварительная оценка: +-50% от реального объёма работ
- начальный этап переговоров
- точность оценки декларируется
2. Стартовая оценка: +-25% (уже уточнены подзадачи)
- основа для предложения
- точность оценки оценивается и закладывается в буфер при планировании (если мы делаем проект с фиксированной ценой)
3. Уточнённая оценка: +-15%
- после формирования образа системы
- может быть явно предусмотрена договором
Если на начальных этапах неопределённость велика (или работы много), то можно договориться с заказчиком, что оценка будет изменена в процессе работы. 

Как увеличивать точность? Рассмотрим некоторые методы
1. Оценка по аналогу
Можно оценивать проект по уже сделаному похожему проекту (или похожему проекту, для которого уже сделана оценка)
2. Параметризация
Разбиваем работу на большое количество элементарных фрагментов и примерно оцениваем каждую задачу
3. Planning poker
Есть несколько человек, каждый оценивает задачу с точки зрения того, что он про эту задачу знает (в оценивании принимают участие все -- и тестировщики, и технические писатели; практика показывает, что люди в команде начинают довольно точно оценивать задачи с появлением опыта). Каждая задача оценивается по некоторой шкале с достаточно большим разрывом (1, 4, 8,...). Фактически берётся колода с оценками, и каждой задаче каждый человек присваивает некоторую карточку.
В SCRUM это некоторые абстрактные единицы, никак не привязанные ни ко времени, ни к деньгам. Условно это "идеальные человекодни".
Если оценки для задачи у команды совпадают, то задача считается оценённой; иначе участники обсуждают задачу и повторяют процесс, пока оценка не сойдётся.
4. PERT: (O + 4R + P) / 6
O - оптимистичная оценка
R - реалистичная
P - пессимистичная
Есть сотрудники, всегда завышающие оценку; есть достаточно оптимистичные сотрудники. Для программистов, кстати, типична оптимистичная оценка.
5. Wideband Delphi
Есть задачи, есть набор экспертов, оценивших задачи.
- эксперты собираются вместе, модератор описывает задачу, выдаёт необходимые материалы
- проводится оценка
- эксперты вновь собираются, обсуждают оценки
- если оценки совпадают, оценивается следующая задача
- иначе участники предлагают свои соображения
6. Экспертная оценка (в следующий раз)
7. UCP (в следующий раз)

3-5 -- для ситуаций, когда есть несколько сотрудников