Для зачёта необходимо сделать практическое задание (на Java)
Также можно будет делать доклады, за хорошие доклады можно получить автомат (но практическая часть обязательна)

==================================================

Мультиагентные системы: что это такое?

1. Когда мы пишем классическую программу, мы программируем в терминах методов (совершаем действие, получаем результат и дальше строим выполнение в соответствии с ним).
В мультиагентных системах всё строится на асинхронных вызовах (мы можем получить результат через некоторое время, можем совсем не получить).
2. В мультиагентных системах фокус не на алгоритм, а на взаимодействие. Благодаря социальному взаимодействию мы можем получить решение, которое нельзя получить стандартными методами (возможно, некоторое его приближение).

История и область применения.

Мультиагентные системы возникли так:
- нужно было обрабатывать информацию
- одного узла не хватало

==================================================

Система Hearsay: blackboard pattern. Есть классная доска, на ней формулируется задача (это может быть база данных, всем видно, что на ней происходит). Каждый эксперт может что-то добавить, постепенно формулировка обрастает некоторыми выводами, и эксперты приходят к решению. При этом в одиночку они прийти к решению не могут.
У этой идеи есть узкое место - сама доска:
- если она пропадает, пропадает всё
- с точки зрения производительности
- с точки зрения конкурентности (нужна некоторая потокобезопасность)

==================================================

Следующая идея: BEENGS (модель существ)

Есть некоторое количество экспертов, у каждого есть информация.
1. Шлём широковещательную формулировку всем
2. Если экспертам есть что добавить, они рассылают информацию всем (тоже широковещательно)
3. Кто-то реагирует, рассылает дополнение (и т.д.)

В данной модели нет центрального звена, но резко возрастают коммуникационные расходы. Число связей растёт квадратично, это накладывает некоторые ограничения на масштабируемость.

- На её основе есть система Artificial Mathematic (AM). В неё были добавлены некоторые аксиомы; она сама для себя определила простое число, алгоритм решета Эратосфена. Ничего нового для людей, впрочем, она не открыла.
- Также была система Eurisco (морской бой - симулятор морского сражения, у участников была возможность варьировать характеристики). Эта система уже открыла что-то новое. 
- Cyc (от Encyclopedia). Задача: собрать как можно больше знаний, накопленных человечеством, в форме, позволяющей им некоторым образом эволюционировать. Её конкурент - DBPedia (что-то вроде wikipedia в машинно-читаемом формате).

Недостатки BEENGS:
- количество существ фиксировано

==================================================

Ещё идея: Actors

Отсылка сообщений в этой модели нешироковещательная (что снимает часть сложностей с коммуникацией) + можно было создавать дополнительных акторов + можно было назначить себе заместителя (с точки зрения других акторов ничего не менялось, но новый актор мог иметь опыт, полученный ранее, и обладать дополнительными возможностями).

==================================================

MACE (1983 г.) - первое появление концепции агента. Она не была предназначена для решения некоторой задачи, это была платформа для разработки алгоритмов для ИИ.
- прикладные агенты (которые нужно разработать в конкретном случае)
- общались друг с другом посредством аснихронных сообщений
- могли искать друг друга 
- могли использовать математические библиотеки

С помощью MACE симулировали ИИ, природные процессы, социальные процессы. Он считается основоположником мультиагентных систем, многие концепции оттуда используются и сейчас.

==================================================

Области применения мультиагентных систем.

I Открытые системы (т.е. структура системы может меняться в процессе выполнения; закрытая же система меняется очень редко.
Пример: автомобиль - закрытая система, а система дорожного движения - открытая система. Ещё пример открытой системы - интернет.)
Мультиагентный подход в открытых системах получает преимущество, поскольку агент должен быть готов к тому, что его действия не приведут к желаемому результату. Вторая сторона может исчезнуть, и придётся искать заново, кто поможет решить задачу.

II. Распределённые системы
Если система разделена на некоторое количество узлов, подразумевает коммуникацию, то это уже подразумевает некоторые внештатные ситуации (соединение обрывается).
Мультиагентный подход позволяет уменьшить сложность (мы делим системы на блоки) и повысить устойчивость.
Пример: 
- системы, контактирующие с реальным миром (тележка ездит, определяет нужные контейнеры)
- системы в промышленности (в цехах)
- задачи симуляции (симуляция трафика)

III. Интерактивные системы
- компьютерные игры. Человек взаимодействует с некоторой системой, и естественно делать её мультиагентной (например, враги могут быть агентами, координировать свои действия)
- помощники (агент следит за вами, передаёт данные; есть агент, который с вами взаимодействует)

==================================================

Как отличить мультиагентную систему от немультиагентной?

Что такое агент? "Некто/нечто, прикладывающий усилия для достижения определённой цели."
- во-первых, он совершает действие
- рационально себя ведёт (т.е. действие совершает обдуманно)
- действия совершаются в некоторой внешней среде (при этом не контролирует внешнюю среду; он может на неё влиять, но должен быть готов к тому, что она ведёт себя не так, как ожидалось)
- действия совершаются автономно (агент сам принимает решения о том, что делать; другие агенты для агента тоже являются частью внешней среды)
Таким образом, агент - некоторая вычислительная система, помещённая во внешнюю среду, способная с ней взаимодействовать автономно и рационально.

Что такое интеллектуальный агент?
- реактивный (способный реагировать на изменения; если во внешней среде происходят изменения, то агент должен скорректировать поведение)
- проактивный (способный проявлять инициативу; если ему надо добиться изменений во внешней среде, он пытается совершать действия, стимулирующие эти изменения; часто проактивность связана со способностью планировать (составить распорядок действий))
- социальный (способный взаимовыгодно взаимодействовать, согласовать свои действия, чтобы добиться цели - общей или индивидуальных)

Все свойства интеллектуального агента по отдельности легко реализуемы:
- система с лампочкой - реактивная система
- компилятор - проактивная система (чётко по инструкции преобразует код)
Но совместить их достаточно сложно (если подменить компилятору файл, он убьёт всё живое).

==================================================

Модель BDI (belief-desire-intention)

Модель, по которой действуют агенты, основана на том, как люди сами принимают решения. Человек смотрит на мир, на то, чего бы ему хотелось, отбирает наиболее актуальное и действует.
- belief - представления о внешнем мире
- desire - чего агент хочет достичь
- intention - что он намеревается сделать

(картинка в тетрадке)
input -> BRF -> B (Belief) -> Option (чего бы хотелось) -> D (множество желаний) -> filter (на желания)
          ^     |
          -------

Замечание:
- желания могут быть противоречивы, поэтому нельзя сразу их брать; они могут, кроме того, конкурировать за ресурсы (и нельзя удовлетворить их все)
- намерения - самое важное 
1. они должны быть непротиворечивы
2. должны иметь некоторое время жизни - желания могут исчезнуть, а намерение должно оставаться, пока оно не будет реализовано или от него не откажутся; но время жизни намерения небесконечно, и агент может от него отказаться; вопрос выбора оптимального баланса - сложный выбор между реактивностью и проактивностью, даже у людей; время жизни логично выбрать исходя из внешней среды - если среда устойчива, логично делать намерения более стабильными и пересматривать их реже
3. они должны влиять на выбор и на рассуждения о будущем (в чём идея: если мы выбрали намерения, мы можем строить свои планы исходя из того, что намерение будет реализовано)
4. намерения не берутся ниоткуда (из текущего набора желаний, например)

По этой схеме выстроено много фреймворков.

==================================================

У нас система мультиагентная, т.е. агентов должно быть несколько.

Зачем нужно взаимодействие агентов?
1. Согласованность
Действия агентов в среде не должны противоречить друг другу (ставить систему в угрожающее состояние - например, роботы-погрузчики не должны хвататься за один контейнер и тянуть в разные стороны).
2. Эффективность
Если один робот будет переносить контейнер из А в В, а другой обратно, то их суммарная эффективность равна 0, хотя они ничего и не портят.

Уровни взаимодействия:
1. Координация
Агенты способны решать только задачу согласованности действий (способны договориться, кто схватит контейнер)
На этом этапе останавливаются большинство распределённых систем.
2. Кооперация
Агенты способны к ситуативным совместным действиям (муравей, если видит, что другой тащит что-то тяжёлое, подходит и начинает помогать)
Подразумевается, что цели у агентов общие (нет конкуренции, муравьи живут в муравейнике вместе)
3. Совместное планирование
План строится на несколько шагов вперёд. Планирование может быть разной сложности, распределённое, централизованное и т.д. Это некоторая кооперация, продолженная в будущее. Цели агентов могут различаться, но подразумевается, что цель у системы единая на некотором высоком уровне (например, одна компания, в которой есть разные департаменты, у каждого свои интересы, но общая цель одна)
4. Negotiation
Это формат кооперации, но у участников нет общей цели, они взаимодействуют исходя из того, что лично им выгодно. Такие взаимодействия подбирать сложнее.

==================================================

Формы коммуникации.

1. Без коммуникации
Даже без коммуникации агенты могут взаимодействовать, если у них есть вся информация о среде (агент и так может понять всё о другом агенте). Это возможно только в сильно искусственных средах.

2. Коммуникация через среду
Агенты не общаются непосредственно, но могут производить действия в среде, которые воспринимаются другими агентами (суть в том, что нет непосредственной передачи от получателя к потребителю)
Классический пример - задача по исследованию удалённых планет. На планете есть много полезных ископаемых, но вайфай не поднимешь. Надо, чтобы роботы взаимодействовали друг с другом без него. Устанавливаем некоторый маяк, который даёт сильный сигнал. У каждого робота есть некоторый набор меток, которые он может выставлять на поверхность планеты.
- робот удаляется от маяка по некоторой траектории
- если находим ископаемые, начинаем их добывать
- возвращаемся к маяку, расставляя метки (пары меток)
- если другой робот на них натыкается, он идёт в сторону, противоположную маяку
- возвращаясь, он расставляет метки
- когда ископаемые заканчиваются, роботы постепенно убирают эту дорожку
Такой способ распространён в природе (у насекомых и у млекопитающих)

3. Использование сигнала
Сигнал - небольшой (порядка нескольких бит) объём информации. Например, радиосигнал, звук, не несущий сложной информации; лампочка.
Пример: дорожное движение (сложная социальная система, взаимодействие идёт через лампочки).
Если бы водители общались в телеграме, например, затраты на передачу/формирование пакета были бы гораздо больше.
Минус сигналов - ограниченный объём

4. Сообщения
Структурированный блок информации неограниченного объёма.
Сообщения усложняют интерпретацию того, чего хотел отправитель.
Люди, например, часто многое недоговаривают, и что-то должно восстанавливаться по контексту.

5. Речевые действия
Коммуникация рассматривается как обычное действие. У агента есть цель, у действия есть форма и есть эффект (при этом не все эффекты нас интересуют; эффект и цель могут не совпасть).
- Коммуникация начинается с формулирования цели с помощью глаголов-перформативов (употребление глагола эквивалентно совершению действия: "Я сообщаю вам, что на улице лежит снег". Глаголы: "прошу", "сообщаю", "запрашиваю" и т.д.; некоторые глаголы не являются перформативами, например, "думаю" - могу и не думать)
- ACL (протокол)