Отчётность:
- >= посетить 8 лекций
- конспект >= 3 лекций (т.к. обычно на работе стандартный способ коммуникации -- конспектировать разговор во время или после него)
- задания
- эссе (с английским вариантом) -- можно по литературе, можно на тему "почему я хочу управлять проектом (или не хочу)", "что понравилось/не понравилось в курсе"; объём эссе на английском в два раза меньше, чем на русском
- экзамен (2 вопроса + беседа по прочитанной литературе)

========================================================

Основные понятия управления проектами

Проект --- деятельность, ограниченная по времени и направленная на создание уникального результата. Например, создание сайта для каждой отдельной компании является проектом (поскольку является уникальным).
Примеры:
1. Изучение английского языка
- не является проектом, если вы просто занимаетесь им время от времени в качестве хобби
- является проектом, если нужно сдать экзамен на некоторый минимальный балл к некоторому сроку; нужно выучить конкретную область языка
К почти любой деятельности можно относиться и как к проекту, и как не к проекту.
2. Обучение в университете полезно рассматривать как проектную деятельность.

Управление проектами --- знания, навыки и приёмы, используемые для достижения целей проектов в рамках установленных ограничений.
Какие возможны ограничения?
- время
- деньги
- человеческие ресурсы
- физические законы (характеристики сложности задачи) -- ??

Специфика проектов разработки ПО
<картинка про качели>
Особенности управления проектами, связанными с ПО:

1. Негативные:
- на каждом этапе участники понимают задание по-своему
- заказчик не всегда грамотно формулирует желаемое
- подрядчик и заказчик говорят на разных языках (подрядчик не понимает бизнес-область, заказчик не понимает технический язык)
- ПО незримо (например, забор можно построить, после чего оценить, потрогать, понять, насколько это сложно или нет; заранее можно описать, что мы хотим получить на выходе, обсудить, перерисовать, достаточно хорошо сформулировать задачу; в случае же с ПО практически невозможно описать то, что будет разрабатываться; есть, конечно, визуальные языки, но полную визуальную модель построить не удастся, ибо она должна быть огромной) 
- работа имеет нелинейную сложность (похожие задачи могут вылиться в очень разное время; в случае с забором можно разбить работу на конкретные этапы, декомпозировать задачу, измерить длительность каждого этапа; в случае ПО оценить сложность бывает довольно нетривиально, т.к. процесс нельзя легко разбить на фрагменты)

2. Позитивно-негативные:
- производительность сотрудников различается в разы (до 10 раз; люди, имеющие одинаковое образование, могут, тем не менее, очень различаться по производительности; минус: когда вы планируете разработку, даже если была произведена декомпозиция, нужно чётко представлять, кто будет делать проект, в зависимости от этого оценки могут получиться очень разными; плюс: если вы умеете чем-нибудь привлекать людей с высокой квалификацией в свою компанию, у вас может быть очень сильное преимущество перед компаниями, которые не могут этого сделать)
- по ходу выполнения требования к проекту меняются (можно, конечно, всё зафиксировать в самом начале, и в военных проектах так и делается, там очень строгий процесс разработки; но в обычных проектах это происходит сплошь и рядом, и причины этому, с одной стороны, субъективные -- заказчик думает, что для этого нужно переписать три строчки кода, и почему бы этого не сделать, а с другой стороны, в процессе выполнения понимание задачи уточняется с обеих сторон; хорошо бы иметь с обеих сторон людей, которые могли бы друг друга понять -- понимающего в предметной области технического специалиста и понимающего в разработке специалиста предметной области; но на практике это может и не произойти; плюс: можно подстроить требования с невыполнимых до тех, которые уже вполне можно выполнить, а также в случае, если вы по ходу понимаете, что ваш проект провален, то можно вернуться к переформулировке требований; обычно обе стороны готовы к тому, что требования могут измениться (кроме уже оговоренных ситуаций с военными, медицинскими и т.д. проектами)). Для обеспечения возможности изменения требований используется, например, методология SCRUM. Начинать работу можно до того, как вы в деталях договорились, что будете делать. 
- код можно изменять (например, если вы строите дом, построили 8 этажей, а вам внезапно говорят, что второй этаж должен быть в два раза выше, всё, что вы сделали, придётся разрушить; в случае с ПО этот процесс менее болезненный; изменение требований будет проходить с меньшими издержками и практически на любом этапе, можно построить процесс так, чтобы это было не очень дорого и для вас, и для вашего заказчика; минусы этого -- если код меняет человек, который плохо его понимает, то могут появиться проблемы, к тому же, факт того, что код можно менять, провоцирует программистов на некоторый перфекционизм и улучшение кода во имя улучшения кода -- "рефакторинг до посинения"; на выходе может, конечно, получиться более красивый код, но зачем и какой ценой? Это, конечно, хорошо и полезно -- сначала можно сделать прототип как получится, а затем его переделать хорошо и правильно; но можно этим злоупотребить, эта работа занимает время и ресурсы, а на выходе, по сути, то же самое)
- основную сложность представляет собственно разработка, а дальнейшее тиражирование и распространение по стоимости гораздо меньше и проще

Программа -- группа взаимосвязянных проектов, управляемых скоординированно, для достижения результатов, которые нельзя достичь про разрозненном управлении проектами. 
Портфель проектов -- набор проектов или программ, объединенных вместе, чтобы способствовать эффективному управлению ими, для достижения бизнес целей. Судьба каждого проекта не очень важна. Важно, чтобы в целом они достигли некоторого результата (в сумме было хорошо, возможно даже, что лишь какому-то одному)

Какие участники есть у проекта?
1. Менеджер проекта -- человек, отвечающий за достижение целей
2. Команда -- люди, работающие над проектом
3. Стейкхолдеры -- люди/компании, увлечённые проектом, на интересы которых проект может как-то повлиять

Задачи менеджера проекта:
1. Сдать проект
2. Организовать работу проекта
3. Руководить проектом
4. Общаться с заказчиком
5. Общаться со стейкхолдерами
и т.д.
Обобщим: обеспечить успех проекта
Если менеджер может чего-то не делать, и результат не пострадает, то он может этого не делать
Чтобы обеспечить успех, менеджер проекта должен заниматься следующими областями:
1. планирование и контроль (понимание, что и как мы хотим делать)
2. управление рамками (работа с требованиями, понимание, что входит и что не входит в цели проекта)
3. управление временем (понимание того, сколько человекомесяцев нужно на выполнение задачи, и как они ложатся в реальное время, какая у вас команда, с какой интенсивностью вы можете привлекать людей, отслеживание того, укладываетесь ли вы вовремя)
4. управление стоимостью (как расходуются ресурсы, укладываетесь ли вы в бюджет)
5. управление персоналом (в больших компаниях производительность можно усреднять, но работать с командой нужно аккуратно)
6. управление коммуникациями (какая информация должна распространяться, какая нет, и т.д.)
7. управление рисками (в любом проекте есть ситуации, которые могут позитивно или негативно повлиять на проект, и их надо учитывать)
8. управление закупками (для разработки ПО не очень частая задача, но тоже нужно понимать, что это такое)
9. управление качеством (контроль качества во время разработки)